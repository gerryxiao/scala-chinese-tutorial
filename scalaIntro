  摘自scala Web 简介

scala是个通用目的的程序设计语言，设计于用简洁、优雅、类型安全的方法表达常见的程序设计模式。它流畅的集成了面向对象和函数式程序设计特点，使java或其他程序员更有工作效率。代码大小比较等同的java应用减少1/2或1/3。

和java无缝集成

现成的java代码和程序员技巧可全面复用。scala程序运行于java虚拟机上，和java在字节码兼容，所以，你可以全面利用现有的java库和程序代码。你可以从scala调用java，也可以从java调用scala，这种集成是无缝的。而且，你熟悉的集成开发工具，如Eclipse、Netbeans、Intellij都支持scala，务须多长时间你就会成为一个高效的scala程序员，因为你已经在半路上！

编译器性能

scala编译器成熟可靠已被多年的产品应用环境所证明。编译器的作者Martin Odersky也是java reference编译器的作者和泛型实现的协作者，至今被无数的java程序员使用。你自然相信他的scala编译器的实现和可比较的java代码运行得一样好。

scala概念

在写了无数行java代码后，Martin Odersky,EPFL教授，意识到java程序员面临的困难。他产生了使用最好的学术知识克服java所面临的问题以提高java程序设计体验的理念。他实践的第一步就是java泛型，被java社区认为是重要的成功。要实现扩展性好的并发程序设计理念，他认识到java的基本语法应该改变，一个简单而迷惑式的语法调整使得java面向对象的特点更为统一完整，并且自然的融合了克服并发问题很关键的函数式设计概念。2001年，scala诞生。

scala程序设计

一些java程序员开始发现scala有些奇异，但不久就乐意于用简介的方式在程序中表达他们的思想，较少的键击，类型推断，一切皆对象、函数传递，及其他特点减少了不必要的语法负担。继续的体验使他们发现scala有着创建简洁易于使用的安全通用库的抽象支持，有些开始创建自己的域特殊的语言DSL，scala随着程序员而扩展，程序员越了解scala，复杂的问题对他们而言越简单。

scala是面向对象的

scala是个纯面向对象语言，每个值是一个对象。对象的类型和行为由类和特征（trait）描叙，类可以通过子类扩展，也可以通过灵活的组合机制（mixin-based composition)实现多重继承

scala是函数式的

scala也是一个函数式语言，每个函数是个值。scala提供简易语法定义匿名函数。它支持高阶函数，允许函数嵌套，支持函数部分应用（currying).scala的case类提供其他常见的函数式编程语言使用的模式匹配和代数类型支持

scala是静态类型的


scala配备的可表达的类型系统，强调以一种安全持续风格强迫使用静态类型。强大的类型系统支持：
泛型
类型变异注释
类型上下界
内部类和抽象类
组合类型
明确类型自说明
视图
多态方法

一个本地类型推断机制避免重复的类型注释。

scala是可扩展的

实际上，域特殊的语言常要求域特殊的语言扩展，scala提供了独特的语言组合机制可以流畅地一库的形式增加新的语言构造：
任何方法可以作为中缀或后缀操符
自动类型依赖的闭合（closure)构造

二者的联合使用可以避免扩展语法定义新的语句，也不必使用宏之类的元程序（meta）设计工具。

scala和java及.Net可以互操作

scala设计为和流行的java2运行时环境具有很好的互操作性,scala和java一样有着同样的分布编译模式,可以访问数以千计的高质量java库..Net支持也可用.