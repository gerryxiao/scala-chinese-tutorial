  函数式程序设计简介

函数式程序设计是一种以评估数学函数作为运算，避免状态和可变数据的程序设计范例。它强调函数应用，而不是过程式程序设计所强调的改变状态。函数式程序设计基于lambda演算提供的函数应用和评估理论框架。
函数式程序设计语言一般具有以下几个特征：

1、支持高阶函数，也即，函数是语言的第一类值，可以作为函数的参数，也可以作为函数的返回结果。
2、函数应用是引用透明的（referentail,transparency),也即纯函数。纯函数和过程式程序设计中的普通函数不同在于不支持副作用。对于同样的输入得到同样的结果。在过程式程序设计中，同样的表达式在不同的时间
根据程序执行状态的不同，可以得到不同的结果。纯函数的结果只依赖于函数的输入值。无副作用使得推断程序和理解程序的行为变得简单。这是函数式程序设计的关键之一。
3、持续不变的数据结构。函数式语言中定义的数据机构是不变的，和过程式程序中，通过改变数据结构中的值来实现插入、删除、排序等算法不同，函数式语言是通过函数应有到数据结构，连续不断地产生新版本数据结构来实现的。函数式程序设计的这个特征，虽然效率低于过程式程序设计，但是由于数据结构的不变性，特别适合多核和并发程序设计环境,增强程序执行的鲁棒性。
4、函数式语言不支持普通的循环语法构造，一般以递归代替，递归就是调用自身的函数。递归可以使程序更易理解，语法更为简洁。

但是，完全没有副作用的程序是没有用的，除了使计算机发热意外（如果，这不算副作用的话）。所以现有的函数式程序设计语言如 lisp,scheme,OCaml,F#,erlang,clojure等，都不是纯函数式语言，都有一定的语法构造处理状态和变量，纯函数式语言 haskell通过Monad把副作用包装起来，和函数式设计的其他部分隔离开来，来达到状态处理的目的。如Haskell著名的Monad IO设计。

面向对象程序设计（OOP）是对过程式程序设计的自然扩展，所谓对象实质上是对程序数据及其常见操作的一种组织形式。归根结底是过程式的。函数式程序设计主要流行于人工智能、学术研究等特定领域，OOP是目前工业普遍接纳的主流程序设计范例。如C++/C#,Java等都是著名的OOP程序设计语言。

随着计算机硬件技术发展遇到瓶颈，计算机处理器的频率受到限制，多核和并发技术成为工业研究领域的重点，函数式程序设计的固有优点重新得到重视，目前函数式程序设计范例逐渐被工业界接纳，如微软早就开始对函数式设计语言haskell和Ocaml开始了研究，不仅在C#语言在2.0以后的版本中加入了如匿名函数、类型推断之类的函数式程序设计构造，还推出了基于OCaml的函数式编程语言F#，c++新标准草案中也增加了函数式设计的内容，新的函数式语言如clojure等也开始浮出水面。

在这些语言中，scala以完美融合OOP和FP著称，是一门有望取代JAVA的新一代函数式编程语言
